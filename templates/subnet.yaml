AWSTemplateFormatVersion: "2010-09-09"
Conditions:
 NotDefaultRouteTableCond: !Not [ !Equals [!Ref RouteTableId, default] ]
 NotDefaultAZCond: !Not [ !Equals [!Ref AvailabilityZone, random] ]
 IsDefaultAZCond: !Equals [!Ref AvailabilityZone, random]
Outputs:
 SubnetId:
  Value:
   Ref: Subnet
 AvailabilityZone:
  Value: !GetAtt Subnet.AvailabilityZone
Parameters:
 SubnetCidr:
  Type: String
  AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  MaxLength: 18
  MinLength: 9
  Description: "Valid CIDR Range. Format: x.x.x.x/x"
  ConstraintDescription: "must be a valid CIDR range formatted as x.x.x.x/x"
 AvailabilityZone:
  Default: random
  Description: "Availability Zone"
  Type: String
  ConstraintDescription: "Must be a valid AZ for the region."
 VpcId:
  Description: "ID of an existing VPC to create the subnet in"
  Type: "AWS::EC2::VPC::Id"
 RouteTableId:
  Description: "Route table that the subnet will attach to."
  Default: default
  Type: String
  MinLength: 1
  MaxLength: 255
  AllowedPattern: "[\\x20-\\x7E]*"
  ConstraintDescription: "can contain only ASCII characters."
 NameTag:
  Description: "Set the name tag for resources."
  Default: default
  Type: String
  MinLength: 1
  MaxLength: 255
  AllowedPattern: "[\\x20-\\x7E]*"
  ConstraintDescription: "can contain only ASCII characters."
Resources:
 Subnet:
  Type: "AWS::EC2::Subnet"
  Properties:
   CidrBlock:
    Ref: SubnetCidr
   AvailabilityZone:
    !If [NotDefaultAZCond, !Ref AvailabilityZone, !Ref "AWS::NoValue"]
   VpcId: !Ref VpcId
   Tags:
    -
     Key: Name
     Value: !Ref NameTag
 RouteTableAssociation:
  Type: "AWS::EC2::SubnetRouteTableAssociation"
  Condition: NotDefaultRouteTableCond
  Properties:
   RouteTableId: !Ref RouteTableId
   SubnetId: !Ref Subnet
