AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Parameters:
  VpcCidr:
    Type: String
    Default: "10.10.0.0/16"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    MaxLength: 18
    MinLength: 9
    Description: "VPC Cidr Block. Format: x.x.x.x/x"
    ConstraintDescription: "must be a valid CIDR range formatted as x.x.x.x/x"
  PublicCidr1:
    Type: String
    Default: "10.10.0.0/20"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    MaxLength: 18
    MinLength: 9
    Description: "First Public Cidr Block. Format: x.x.x.x/x"
    ConstraintDescription: "must be a valid CIDR range formatted as x.x.x.x/x"
  PublicCidr2:
    Type: String
    Default: "10.10.16.0/20"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    MaxLength: 18
    MinLength: 9
    Description: "Second Public Cidr Block. Format: x.x.x.x/x"
    ConstraintDescription: "must be a valid CIDR range formatted as x.x.x.x/x"
  PrivateCidr1:
    Type: String
    Default: "10.10.32.0/20"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    MaxLength: 18
    MinLength: 9
    Description: "First Private Cidr Block. Format: x.x.x.x/x"
    ConstraintDescription: "must be a valid CIDR range formatted as x.x.x.x/x"
  PrivateCidr2:
    Type: String
    Default: "10.10.48.0/20"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    MaxLength: 18
    MinLength: 9
    Description: "Second Private Cidr Block. Format: x.x.x.x/x"
    ConstraintDescription: "must be a valid CIDR range formatted as x.x.x.x/x"
  NameTag:
    Type: String
    Default: "billing"
    AllowedPattern: "[\\x20-\\x7E]*"
    MaxLength: 255
    MinLength: 1
    Description: "Set the name tag for vpc."
    ConstraintDescription: "can contain only ASCII characters."
  RedshiftUser:
    Type: String
    Default: "billing"
    Description: User Name for Redshift Cluster
  RedshiftPass:
    Type: String
    NoEcho: true
    Description: Password for Redshift Cluster. Password should be atleast 8 characters long.
  RedshiftDatabase:
    Type: String
    Default: "billing"
    Description: Database Name for Redshift Cluster.
  RedshiftSnapshotIdentifier:
    Type: String
    Description: Identifier of Redshift Snapshot for Restoration.
  RedshiftSnapshotClusterIdentifier:
    Type: String
    Description: Redshift Cluster Identifier of Source Snapshot. This must be specified if RedshiftSnapshotIdentifier is set.
Resources:
  Vpc:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: "./vpc.yaml"
      Parameters:
        VpcCidr: !Ref VpcCidr
        CreateVpcSecurityGroup: false
        OpenVpcCommunication: false
        CreateInternetGateway: false
        NameTag: !Ref NameTag
  RouteTables:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: "./route_tables.yaml"
      Parameters:
        NameTag: !Ref NameTag
        VpcId: !Sub "${Vpc.Outputs.VpcId}"
  PublicSubnet1:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: "./subnet.yaml"
      Parameters:
        NameTag: !Join
          - "."
          - - !Ref NameTag
            - "public.subnet.1"
        AvailabilityZone: !Select [ 1, !GetAZs "" ]
        VpcId: !Sub "${Vpc.Outputs.VpcId}"
        SubnetCidr: !Ref PublicCidr1
        RouteTableId: !Sub "${RouteTables.Outputs.RouteTableIdForPublicSubnets}"
  PublicSubnet2:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: "./subnet.yaml"
      Parameters:
        NameTag: !Join
          - "."
          - - !Ref NameTag
            - "public.subnet.2"
        AvailabilityZone: !Select [ 1, !GetAZs "" ]
        VpcId: !Sub "${Vpc.Outputs.VpcId}"
        SubnetCidr: !Ref PublicCidr2
        RouteTableId: !Sub "${RouteTables.Outputs.RouteTableIdForPublicSubnets}"
  PrivateSubnet1:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: "./subnet.yaml"
      Parameters:
        NameTag: !Join
          - "."
          - - !Ref NameTag
            - "private.subnet.1"
        VpcId: !Sub "${Vpc.Outputs.VpcId}"
        SubnetCidr: !Ref PrivateCidr1
        AvailabilityZone: !Sub "${PublicSubnet1.Outputs.AvailabilityZone}"
        RouteTableId: !Sub "${RouteTables.Outputs.RouteTableIdForPrivateSubnets}"
  PrivateSubnet2:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: "./subnet.yaml"
      Parameters:
        NameTag: !Join
          - "."
          - - !Ref NameTag
            - "private.subnet.2"
        VpcId: !Sub "${Vpc.Outputs.VpcId}"
        SubnetCidr: !Ref PrivateCidr2
        AvailabilityZone: !Sub "${PublicSubnet2.Outputs.AvailabilityZone}"
        RouteTableId: !Sub "${RouteTables.Outputs.RouteTableIdForPrivateSubnets}"
  SecurityGroups:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: "./security_groups.yaml"
      Parameters:
        NameTag: !Ref NameTag
        VpcId: !Sub "${Vpc.Outputs.VpcId}"
  NatGateway:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: "./nat_gateway.yaml"
      Parameters:
        PublicSubnetId: !Sub "${PublicSubnet1.Outputs.SubnetId}"
        RouteTableId: !Sub "${RouteTables.Outputs.RouteTableIdForPrivateSubnets}"
  RedshiftCluster:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: "./redshift.yaml"
      Parameters:
        RedshiftUser: !Ref RedshiftUser
        RedshiftPass: !Ref RedshiftPass
        RedshiftDatabase: !Ref RedshiftDatabase
        RedshiftSubnetId1: !Sub "${PrivateSubnet1.Outputs.SubnetId}"
        RedshiftSubnetId2: !Sub "${PrivateSubnet2.Outputs.SubnetId}"
        RedshiftSecurityGroupId: !Sub "${SecurityGroups.Outputs.RedshiftSecurityGroupId}"
        RedshiftSnapshotIdentifier: !Ref RedshiftSnapshotIdentifier
        RedshiftSnapshotClusterIdentifier: !Ref RedshiftSnapshotClusterIdentifier
  BucketServiceIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "AllowRedshiftServiceToAssumeRole"
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "redshift.amazonaws.com"
  EncryptionDecryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "Encryption and Decryption key for Lambda"
      KeyPolicy:
        Id: "LambdaEncDec"
        Version: "2012-10-17"
        Statement:
          -
            Sid: "Allow administration of the key"
            Effect: "Allow"
            Action:
              - "kms:*"
            Principal:
              AWS: !Ref AWS::AccountId
            Resource: '*'
          -
            Sid: "Allow Encryption Service to use this key"
            Effect: "Allow"
            Action:
              - "kms:Encrypt"
            Principal:
              AWS: !GetAtt LambdaFunctionIAMRole.Arn
            Resource: '*'
          -
            Sid: "Allow Decryption Service to use this key"
            Effect: "Allow"
            Action:
              - "kms:Decrypt"
            Principal:
              AWS: !GetAtt LambdaFunctionIAMRole.Arn
            Resource: '*'
  SQLTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName : "billing_sql"
      AttributeDefinitions:
        -
          AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  LambdaFunctionIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "AllowLambdaServiceToAssumeRole"
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        -
          PolicyName: "InlinePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "iam:*"
                  - "kms:*"
                  - "s3:*"
                  - "sts:*"
                  - "ec2:*"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
  SQLLambdaFunctionIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "AllowLambdaServiceToAssumeRole"
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        -
          PolicyName: "InlinePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "ec2:*"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
  ImportSQLFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SungardAS-Billing-Import-SQL
      Handler: index_import_sql.handler
      Runtime: nodejs6.10
      CodeUri: ../src
      Role: !GetAtt SQLLambdaFunctionIAMRole.Arn
      Timeout: 300
      VpcConfig:
        SecurityGroupIds:
          - !Sub "${SecurityGroups.Outputs.RedshiftSecurityGroupId}"
        SubnetIds:
          - !Sub "${PrivateSubnet1.Outputs.SubnetId}"
          - !Sub "${PrivateSubnet2.Outputs.SubnetId}"
      Environment:
        Variables:
          SQL_TABLE_NAME: !Ref SQLTable
      Events:
        BillingDataUpload:
          Type: S3
          Properties:
            Bucket: !Ref Bucket
            Events: s3:ObjectCreated:*
  ImportFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SungardAS-Billing-Import
      Handler: index_import.handler
      Runtime: nodejs6.10
      CodeUri: ../src
      Role: !GetAtt LambdaFunctionIAMRole.Arn
      Timeout: 300
      VpcConfig:
        SecurityGroupIds:
          - !Sub "${SecurityGroups.Outputs.RedshiftSecurityGroupId}"
        SubnetIds:
          - !Sub "${PrivateSubnet1.Outputs.SubnetId}"
          - !Sub "${PrivateSubnet2.Outputs.SubnetId}"
      Environment:
        Variables:
          BUCKET_IAM_ROLE_ARN: !GetAtt BucketServiceIAMRole.Arn
          BUCKET_REGION: !Ref 'AWS::Region'
          REDSHIFT_CONNECTION_STRING: !Sub "${RedshiftCluster.Outputs.RedshiftConnectionString}"
          REDSHIFT_USER: !Ref RedshiftUser
          REDSHIFT_PASS: !Ref RedshiftPass
          KMS_REGION: !Ref 'AWS::Region'
          KMS_KEY_ID: !Ref EncryptionDecryptionKey
          SQL_TABLE_NAME: !Ref SQLTable
  Bucket:
    Type: AWS::S3::Bucket
Outputs:
  EncryptionDecryptionKeyId:
    Description: "Encryption Decryption KMS Key Id"
    Value: !Ref EncryptionDecryptionKey
  BillingDataUploadBucketName:
    Description: "Billing Data Upload Bucket Name"
    Value: !Ref Bucket
  BucketServiceIAMRoleNameForRedshift:
    Description: "Name of IAM Role that permits Redshift to access S3 Bucket"
    Value: !Ref BucketServiceIAMRole
